<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>大数据 on Charent的博客</title>
        <link>https://charent.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/</link>
        <description>Recent content in 大数据 on Charent的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 21 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://charent.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Parquet文件的读写和循环遍历</title>
        <link>https://charent.github.io/post/parquet%E6%96%87%E4%BB%B6%E7%9A%84%E8%AF%BB%E5%86%99%E5%92%8C%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/</link>
        <pubDate>Mon, 21 Aug 2023 00:00:00 +0000</pubDate>
        
        <guid>https://charent.github.io/post/parquet%E6%96%87%E4%BB%B6%E7%9A%84%E8%AF%BB%E5%86%99%E5%92%8C%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/</guid>
        <description>&lt;h3 id=&#34;parquet文件介绍&#34;&gt;Parquet文件介绍
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Parquet 是 Hadoop 生态圈中主流的列式存储格式，最早是由 Twitter 和 Cloudera 合作开发，2015 年 5 月从 Apache 孵化器里毕业成为 Apache 顶级项目。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据压缩比高，文件大小较小，适合网络传输;&lt;/li&gt;
&lt;li&gt;读写方便， python中&lt;code&gt;pandas&lt;/code&gt;支持直接读写，&lt;code&gt;FastParquet&lt;/code&gt;和&lt;code&gt;pyarrow&lt;/code&gt;则提供更多的自定义操作。&lt;/li&gt;
&lt;li&gt;I/O操作次数少，减少磁盘的使用率。&lt;/li&gt;
&lt;li&gt;内存占用少，适合处理大数据集。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;读parquet文件&#34;&gt;读Parquet文件
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;FastParquet&lt;/code&gt;读及遍历&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; fastparquet &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ParquetFile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ParquetFile(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./example.parquet&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 大数据集to_pandas会占用大量的内存&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# df = pf.to_pandas()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 查看行数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(pf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; pf_chunk &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; pf:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; rows &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; pf_chunk&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iter_row_groups():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; prompt, response &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(rows[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;prompt&amp;#39;&lt;/span&gt;], rows[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;response&amp;#39;&lt;/span&gt;]):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;pyarrow&lt;/code&gt;读及遍历&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pyarrow.parquet &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pq
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  pq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_table(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./example.parquet&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 大数据集to_pandas会占用大量的内存&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# df = pt.to_pandas()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 查看行数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(pt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_rows)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; prompt, response &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(pt[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;prompt&amp;#39;&lt;/span&gt;], pt[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;response&amp;#39;&lt;/span&gt;]):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    prompt, response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prompt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;as_py(), response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;as_py()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
